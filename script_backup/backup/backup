#!/bin/sh
#
#
# shell script to do periodic backup with cron
#
#
# (c) 2016 nimmis <kjell.havneskold@gmail.com>
#
#######################################################

BASE_DIR="/usr/local"
CONF_DIR="${BASE_DIR}/etc/backup"
BIN_DIR="${BASE_DIR}/bin"
LIB_DIR="${BASE_DIR}/lib/backup"

#
# set parameter in configfile
#
# set_params_in_config <configfile> <parameter> <value>
#

set_params_in_config() {
  # if file does not exists, create empty file
  if [ ! -f ${1} ]; then
    touch ${1}
  fi
  # check to se if parameter exists in file
  if grep -q ^${2}\= ${1} ; then
    # replace value for parameter
    sed -i "s/^${2}\=.*/${2}\=${3}/" ${1}
  else
    # add new line at end of file
    echo "${2}=${3}" >> ${1}
  fi
}

#
# set default parameters
#
# set_def_params_in_config <configfile> <parameter> <value>
#

set_def_params_in_config() {
  if [ ! -f ${1} ] || 
     ! grep -q ^${2}\= ${1} ; then
    set_params_in_config ${1} ${2} "${3}"
  fi
}

#
#
# set_cron_schedule
#
# set_cron_schedule <interval>
#
# the <interval> is defined as <number of units><unit> where
# unit is
# m for minutes
# h for hours
# d for days
# M for month

set_cron_schedule() {
  # get units
  units=`echo ${1} | egrep -o '[0-9]+'`
  unit=`echo ${1} | egrep -o '[m,h,d,m]$'`
  
  # check that both are defined
  if [ -z ${units} ] || [ -z ${unit} ]; then
    echo "wrong cron time format"
    echo "format is <number><unit> where unit is any of m,h,d,M" 
    exit 1
  fi

  case ${unit} in
    m) cron="*\/${units} * * * *"
       ;;
    h) cron="0 *\/${units} * * *" 
       ;;
    d) cron="0 0 *\/${units} * *"
       ;;
    M) cron="0 0 0 *\/${units} *" 
       ;;
    *) echo "Unit must be h,m,d or M"
       exit 1
       ;;
  esac

  set_params_in_config ${CONF_DIR}/${cmdname}.conf backup_interval ${1} 
  set_params_in_config ${CONF_DIR}/${cmdname}.conf backup_cron "\'${cron}\'"

  # if active, need to reload with new interval
  if test_cron; then
    echo "ative need to reload cron"
    # reload settings
    check_config_params
    # update cron
    set_cron
  fi
}

#
# set number of bacup copies to keep
#

set_copies() {
  # be sure it's numeric
  copies=`echo ${1} | egrep -o '[0-9]+'` 

  # set value if set
  if [ -z ${copies} ]; then
    echo "need to give numeric value to number of copies to keep"
    exit 1
  else
    set_params_in_config ${CONF_DIR}/${cmdname}.conf backups_to_keep ${copies}
  fi
}

#
# add cron line to crontab
#

set_cron() {
  { /usr/bin/crontab -l | grep -v "${0} backup$" ; echo "${backup_cron} ${0} backup"; } | /usr/bin/crontab -
}

#
# remove cron line from crontab
#

unset_cron() {
  /usr/bin/crontab -l | grep -v "${0} backup$" | /usr/bin/crontab -
}

#
# test if cron line is present in crontab
#

test_cron() {
   /usr/bin/crontab -l | grep -q "${0} backup$" 
   return $?
}

#
# catch name used to execute this command
#

cmdnamepath=$0
cmdname=${cmdnamepath##*/}
cmd=$1

#
# check configuration file and critical values from the file
#
check_config_params() {

  # check that the configutation file exists, if not, create and
  # set default parametervalues
  if [ ! -d ${CONF_DIR} ]; then
    mkdir -p ${CONF_DIR}
  fi

  # check and set default values
  subdir=`hostname`
  set_def_params_in_config ${CONF_DIR}/${cmdname}.conf backup_dir "/backup/${subdir}/${cmdname}"
  set_def_params_in_config ${CONF_DIR}/${cmdname}.conf tmp_base_dir "/tmp"
  set_def_params_in_config ${CONF_DIR}/${cmdname}.conf backups_to_keep 5
  set_def_params_in_config ${CONF_DIR}/${cmdname}.conf backup_interval 1h
  set_def_params_in_config ${CONF_DIR}/${cmdname}.conf backup_cron "'* * */1 * *'" 

  # load settings
  source ${CONF_DIR}/${cmdname}.conf

  # check that the backup directory is definied and exists
  if [ -z ${backup_dir} ]; then
    echo "no backup directory defined (backup_dir=) in ${CONF_DIR}/${cmdname}.conf"
    exit 1
  else
    # check if backup directory exists
    if [ ! -d ${backup_dir} ]; then
       echo "creating backupdirectory ${backup_dir}"
       mkdir -p ${backup_dir} || exit 1 
    fi
  fi

  # check if there are extra config_params

  if check_for_alt_subs 'extra_config_params' ; then 
    extra_config_params
  fi
}

# set_destination <destination directory>
#
# set the destination directory for the backup
#

set_destination() {
  if [ -z ${1} ]; then
    echo "destination directory cannot be empty"
    exit ;
  fi

  set_params_in_config ${CONF_DIR}/${cmdname}.conf backup_dir $( echo "${1}" | sed 's./.\\/.g' )
}
#
# check to see if alternative functions exists
# in the directory /usr/local/lib/backup

check_alt_procs() {
  # check if the file exists
  if [ -f ${LIB_DIR}/${cmdname}.lib ]; then 
    source ${LIB_DIR}/${cmdname}.lib
  fi
} 


#
# print information about current backup
#

print_backup_info() {
  backups=`ls -1 ${backup_dir} | wc -l`          
  latest=`ls -1 ${backup_dir} | tail -1`         
  total_size=`du -hs ${backup_dir} | awk '{print $1}'`

  printf "Active backups %s of maximum %s\n" `ls -1l ${backup_dir} | wc -l` ${backups_to_keep}
  printf "Backup interval %s (cron %s)\n" ${backup_interval} "${backup_cron}"
  printf "Latest backup file %s\n" ${latest}            
  echo "Total size of backups ${total_size}B"
  echo "Backup destination directory is ${backup_dir}"
}

#
# remove backup not active
#

retention_backup() {

  
#  if [ -f ${backup_dir}/${cmdname}* ]; then

    # get old achives to delete 
    remove_backups=`ls -1 ${backup_dir}/${cmdname}* 2> /dev/null | head -n -${backups_to_keep}`                                                         

    # remove selected files
    for remove_file in $remove_backups                                                                                                     
    do                                                                                                                                     
      echo "removing old backup $remove_file"                                                                                              
      rm -f ${remove_file}                                                                                                                 
    done 
#  fi   
}

#
# check if function exists, returns to if it exists
#

check_for_alt_subs() {
  type $1 | grep -q "shell function"
  return $?
}

#
# return status of backup, true if cron job is active
#

backup_status() {
  if check_for_alt_subs 'alt_backup_status' ; then
    alt_backup_status
  else
    if test_cron ; then                        
      echo "Backup is active"                                  
    else                                                       
      echo "Backup is disabled"                                
    fi                                                         
    print_backup_info
  fi    
}

#
# help help information
#
show_help() {
  echo "$0 <command> [<parameters>]"         
  echo                                                
  echo "command to controll backup of database in container"
  echo                                                 
  echo "Command                Information"
  echo "status                 gives the status of backup (active/disabled/number of backups/disk size)"
  echo "disable                disable backup"
  echo "enable                 enable backup"
  echo "destination <dir>      set backup-file destination (default /backup/<hostname>/<cmdname>)"
  echo "retain <num>           set number of backup to retain"
  echo "schedule <inter>       set sceduled intervall between backups (hour/day/week/month)"
  echo "show                   show currently saved backups"
  echo "backup                 run backup now"
  echo "help                   Show this information"
  if check_for_alt_subs 'alt_help' ; then     
     alt_help           
  fi
}

#
# get alternative functions
#

check_alt_procs

#
# read settings
#

check_config_params

case ${1} in

status)
  backup_status
  ;;
show)
  echo "list of backups"
  ls -1l ${backup_dir}
  ;;
schedule)
  set_cron_schedule $2
  ;;
retain)
  set_copies $2
  ;;
destination)
  set_destination $2
  ;;
disable)
  unset_cron
  ;;
enable)
  set_cron
  ;;
backup)
  do_backup
  ;;
help|*)
  # check to see if there are more commands to test
  if [ ! -z ${1} ] &&
     [ ! -z ${alt_cmd} ] &&
     echo ${alt_cmd} | grep -q "#${1}" ; then
     if check_for_alt_subs 'alt_case' ; then 
       alt_case ${1} ${2}
     fi
  else
     show_help
  fi
  ;;
esac

