# The beauty of this CI setup is that it will build any valid DOCKERFILE by setting a few variables.
# See how at https://github.com/firepress-org/rclone-in-docker/blob/master/README-CI.md
# Requires secrets on github: DOCKERHUB_PASSWORD, TOKEN_SLACK
# Update DOCKERFILE_NAME if you are using a special Dockerfile name
# The way we define variables is a hack. See why: https://bit.ly/2ZEAt6u
#
# GNU v3 | Please credit the author if you are re-using some of it :-p
# by Pascal Andy | https://pascalandy.com/blog/now/

name: CI-Dockerfile_master-branch
on:
  schedule:
    - cron: '0 8 * * *'
  push:
    branches:
      - master
jobs:

  Job1:
    name: Job 1 of 2
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@master

      - name: Define variables
        run: |
          echo "Dockerfile" > DOCKERFILE_NAME
          #
          # Logically defined
          cat $(cat DOCKERFILE_NAME) | grep DOCKERHUB_USER= | head -n 1 | grep -o '".*"' | sed 's/"//g' > DOCKERHUB_USER
          cat $(cat DOCKERFILE_NAME) | grep APP_NAME= | head -n 1 | grep -o '".*"' | sed 's/"//g' > APP_NAME
          cat $(cat DOCKERFILE_NAME) | grep VERSION= | head -n 1 | grep -o '".*"' | sed 's/"//g' > VERSION
          cat $(cat DOCKERFILE_NAME) | grep GITHUB_USER= | head -n 1 | grep -o '".*"' | sed 's/"//g' > GITHUB_USER
          cat $(cat DOCKERFILE_NAME) | grep GITHUB_ORG= | head -n 1 | grep -o '".*"' | sed 's/"//g' > GITHUB_ORG
          cat $(cat DOCKERFILE_NAME) | grep GITHUB_REGISTRY= | head -n 1 | grep -o '".*"' | sed 's/"//g' > GITHUB_REGISTRY
          #
          date -d "-4 hours" "+%Y-%m-%d_%HH%Ms%S" > DATE_IT
          git rev-parse --short HEAD > SHORT_COMMIT_HASH
          echo "$(cat DOCKERHUB_USER)/$(cat APP_NAME)" > DOCKER_USER_APP
          echo "$(cat GITHUB_USER)/$(cat APP_NAME)" > GITHUB_USER_APP
          #
          # Tags are logically defined
          echo "$(cat DOCKER_USER_APP):latest" > TAG_LATEST
          echo "$(cat DOCKER_USER_APP):stable" > TAG_STABLE
          echo "$(cat DOCKER_USER_APP):$(cat VERSION)" > TAG_VERSION
          echo "$(cat DOCKER_USER_APP):$(cat VERSION)_$(cat DATE_IT)_$(cat SHORT_COMMIT_HASH)" > TAG_BEST_PRACTICE

      - name: Build
        run: |
          # UAT is User Acceptance Testing
          echo "$(cat APP_NAME):uat" > TAG_UAT
          docker build --file $(cat DOCKERFILE_NAME) --tag $(cat TAG_UAT) .
          #
          docker build --file $(cat DOCKERFILE_NAME) --tag $(cat TAG_BEST_PRACTICE) .
          docker build --file $(cat DOCKERFILE_NAME) --tag $(cat TAG_VERSION) .
          docker build --file $(cat DOCKERFILE_NAME) --tag $(cat TAG_STABLE) .
          docker build --file $(cat DOCKERFILE_NAME) --tag $(cat TAG_LATEST) .
          #
          # build for Github Package Registry (GPR)

      - name: Test image with docker-library
        run: |
          git clone --depth 1 https://github.com/docker-library/official-images.git official-images
          official-images/test/run.sh $(cat TAG_UAT)

      - name: Logs / All tags & variables
        run: |
          echo "Check out https://hub.docker.com/r/$(cat DOCKERHUB_USER)/$(cat APP_NAME)/tags"
          echo " "
          echo "$(cat TAG_BEST_PRACTICE) < TAG_BEST_PRACTICE"
          echo "$(cat TAG_VERSION) < TAG_VERSION"
          echo "$(cat TAG_STABLE) < TAG_STABLE"
          echo "$(cat TAG_LATEST) < TAG_LATEST"
          echo " "
          echo "$(cat APP_NAME) < APP_NAME"
          echo "$(cat VERSION) < VERSION"
          echo "$(cat DOCKERFILE_NAME) < DOCKERFILE_NAME"
          echo " "
          echo "$(cat DATE_IT) < DATE_IT"
          echo "$(cat SHORT_COMMIT_HASH) < SHORT_COMMIT_HASH"
          echo "$(cat DOCKERHUB_USER) < DOCKERHUB_USER"
          echo "$(cat GITHUB_USER) < GITHUB_USER"
          echo "$(cat GITHUB_ORG) < GITHUB_ORG"
          echo "$(cat DOCKER_USER_APP) < DOCKER_USER_APP"
          echo "$(cat GITHUB_USER_APP) < GITHUB_USER_APP"
          echo "$(cat GITHUB_REGISTRY) < GITHUB_REGISTRY"

      - name: Logs / docker (inspect, history, version, info), uname
        run: |
          docker inspect $(cat TAG_UAT)
          docker history $(cat TAG_UAT) --no-trunc
          docker version
          docker info
          uname -a

      - name: Publish
        run: |
          echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login --username $(cat DOCKERHUB_USER) --password-stdin
          docker push $(cat TAG_LATEST)
          docker push $(cat TAG_STABLE)
          docker push $(cat TAG_VERSION)
          docker push $(cat TAG_BEST_PRACTICE)
          #
          # push on Github Package Registry (GPR)
          # echo "ToDo/ docker build -t docker.pkg.github.com/$(cat GITHUB_ORG)/$(cat GITHUB_REGISTRY)/$(cat TAG_BEST_PRACTICE)"
          # echo "ToDo/ docker login docker.pkg.github.com -u $(cat GITHUB_USER) -p ${{ secrets.GPR_PASS }}"
          # echo "ToDo/ docker push docker.pkg.github.com/$(cat GITHUB_ORG)/$(cat GITHUB_REGISTRY)/$(cat TAG_BEST_PRACTICE)"

  Job2:
    needs: job1
    name: Job 2 of 2
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@master

      - name: Define variables
        run: |
          echo "Dockerfile" > DOCKERFILE_NAME  
          cat $(cat DOCKERFILE_NAME) | grep DOCKERHUB_USER= | head -n 1 | grep -o '".*"' | sed 's/"//g' > DOCKERHUB_USER
          cat $(cat DOCKERFILE_NAME) | grep APP_NAME= | head -n 1 | grep -o '".*"' | sed 's/"//g' > APP_NAME
          cat $(cat DOCKERFILE_NAME) | grep VERSION= | head -n 1 | grep -o '".*"' | sed 's/"//g' > VERSION
          git rev-parse --short HEAD > SHORT_COMMIT_HASH
          echo "$(cat APP_NAME):$(cat VERSION) / $(cat SHORT_COMMIT_HASH)" > NOTI_MESSAGE
          #
          # Tags are logically defined
          echo "$(cat DOCKERHUB_USER)/$(cat APP_NAME)" > DOCKER_USER_APP
          echo "$(cat DOCKER_USER_APP):latest" > TAG_LATEST

      - name: Push README to dockerhub description
        run: |
          docker run --rm \
            -v $(pwd)/README.md:/data/README.md \
            -e DOCKERHUB_USERNAME=$(cat DOCKERHUB_USER) \
            -e DOCKERHUB_PASSWORD=${{ secrets.DOCKERHUB_PASSWORD }} \
            -e DOCKERHUB_REPO_PREFIX=$(cat DOCKERHUB_USER) \
            -e DOCKERHUB_REPO_NAME=$(cat APP_NAME) \
            devmtl/readme-to-dockerhub:stable

      - name: Notify on Slack
        run: |
          docker run --rm \
            --name noti \
            -e NOTI_MESSAGE="$(cat NOTI_MESSAGE)" \
            -e SLACK_CHANNEL="github-actions" \
            -e SLACK_TOKEN_CRON="${{ secrets.TOKEN_SLACK }}" \
            devmtl/noti:stable sh -c \
            ' NOTI_SLACK_TOKEN="$SLACK_TOKEN_CRON" \
              NOTI_SLACK_CHANNEL="$SLACK_CHANNEL" \
              noti -k -m "$NOTI_MESSAGE" '

      # Added it here is it take in average 4 min to complete.
      - name: Test image with Aquasec microscanner
        run: |
          wget --retry-connrefused --waitretry=1 --read-timeout=5 --timeout=5 --tries=10 https://raw.githubusercontent.com/lukebond/microscanner-wrapper/master/scan.sh && chmod +x scan.sh
          #
          echo "The build will stop only if it finds a critical issue"
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest \
            -q --exit-code 1 --severity CRITICAL $(cat TAG_LATEST)

      - name: Github Actions ideas to implements
        run: |
          echo "see â€”> https://gist.github.com/pascalandy/4e499b7c42023836a7d207277923fc09"
